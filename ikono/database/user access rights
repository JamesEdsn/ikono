CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role_id INT,
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);


CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);


CREATE TABLE permissions (
    permission_id INT AUTO_INCREMENT PRIMARY KEY,
    permission_name VARCHAR(50) NOT NULL UNIQUE
);


CREATE TABLE role_permissions (
    role_id INT,
    permission_id INT,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id),
    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)
);


INSERT INTO roles (role_name) VALUES ('Admin'), ('Editor'), ('Viewer');


INSERT INTO permissions (permission_name) VALUES ('create_post'), ('edit_post'), ('delete_post'), ('view_post');


INSERT INTO role_permissions (role_id, permission_id) VALUES
(1, 1), -- Admin can create_post
(1, 2), -- Admin can edit_post
(1, 3), -- Admin can delete_post
(1, 4), -- Admin can view_post
(2, 2), -- Editor can edit_post
(2, 4), -- Editor can view_post
(3, 4); -- Viewer can view_post


INSERT INTO users (username, password, role_id) VALUES ('user1', 'password1', 1), ('user2', 'password2', 2), ('user3', 'password3', 3);

SELECT u.username, r.role_name, p.permission_name
FROM users u
JOIN roles r ON u.role_id = r.role_id
JOIN role_permissions rp ON r.role_id = rp.role_id
JOIN permissions p ON rp.permission_id = p.permission_id
WHERE u.username = 'user1'; -- Ganti dengan username yang diinginkan
